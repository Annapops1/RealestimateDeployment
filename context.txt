Sure! Here’s a summary of your project based on the provided code snippets:

### Project Overview

This project is a web application for managing real estate properties, allowing users to add, edit, and delete property listings. It includes features for user authentication, property management, and contract creation.

### Key Components

1. **User Authentication**:
   - Users can log in and manage their profiles.
   - User roles are defined (e.g., seller).

2. **Property Management**:
   - Users can add new properties with details such as title, description, price, property type, location, area, bedrooms, bathrooms, and total floors.
   - Properties can be edited or deleted.
   - Validation is implemented to ensure required fields are filled correctly.

3. **Database Models**:
   - The `Property` model includes fields for property details, location, and user association.
   - The model supports optional fields like bedrooms, bathrooms, and total floors.

4. **Frontend Forms**:
   - Forms for adding and editing properties include input fields for all relevant property details.
   - JavaScript validation is used to provide real-time feedback on form inputs.

5. **Contract Creation**:
   - Users can create contracts for properties, specifying sale price, advance payment, and terms.
   - Validation ensures that all required fields are filled out correctly.

### Code References

- **Property Routes**:

```10:90:app/routes/property.py
@bp.route('/add', methods=['GET', 'POST'])
@login_required
def add():
    if current_user.user_type != 'seller':
        flash('Only sellers can add properties', 'danger')
        return redirect(url_for('main.index'))
        
    if request.method == 'POST':
        # Handle image upload
        image_file = request.files.get('property_image')
        image_filename, image_url = save_property_image(image_file)
        
        property = Property(
            title=request.form.get('title'),
            description=request.form.get('description'),
            price=float(request.form.get('price')),
            property_type=request.form.get('property_type'),
            location=request.form.get('location'),
            latitude=float(request.form.get('latitude')) if request.form.get('latitude') else None,
            longitude=float(request.form.get('longitude')) if request.form.get('longitude') else None,
            area=float(request.form.get('area')),
            bedrooms=int(request.form.get('bedrooms')) if request.form.get('bedrooms') else None,
            bathrooms=int(request.form.get('bathrooms')) if request.form.get('bathrooms') else None,
            total_floors=int(request.form.get('total_floors')) if request.form.get('total_floors') else None,
            user_id=current_user.id,
            image_filename=image_filename,
            image_url=image_url
        )
        db.session.add(property)
        db.session.commit()
        flash('Property added successfully!', 'success')
        return redirect(url_for('user.seller_dashboard'))
        


@bp.route('/edit/<int:id>', methods=['GET', 'POST'])
@login_required
def edit(id):
    property = Property.query.get_or_404(id)
    if property.user_id != current_user.id:
        flash('You can only edit your own properties', 'danger')
        return redirect(url_for('user.seller_dashboard'))
        
    if request.method == 'POST':
        # Handle image upload
        image_file = request.files.get('property_image')
        if image_file:
            image_filename, image_url = save_property_image(image_file)
            property.image_filename = image_filename
            property.image_url = image_url
            
        property.title = request.form.get('title')
        property.description = request.form.get('description')
        property.price = float(request.form.get('price'))
        property.property_type = request.form.get('property_type')
        property.location = request.form.get('location')
        property.latitude = float(request.form.get('latitude')) if request.form.get('latitude') else None
        property.longitude = float(request.form.get('longitude')) if request.form.get('longitude') else None
        property.area = float(request.form.get('area'))
        property.bedrooms = int(request.form.get('bedrooms')) if request.form.get('bedrooms') else None
        property.bathrooms = int(request.form.get('bathrooms')) if request.form.get('bathrooms') else None
        property.total_floors = int(request.form.get('total_floors')) if request.form.get('total_floors') else None
        
        db.session.commit()
        flash('Property updated successfully!', 'success')
        return redirect(url_for('user.seller_dashboard'))
        
    return render_template('property/edit.html', property=property)

@bp.route('/delete/<int:id>')
@login_required
def delete(id):
    property = Property.query.get_or_404(id)
    if property.user_id != current_user.id:
        flash('You can only delete your own properties', 'danger')
        return redirect(url_for('user.seller_dashboard'))
        
    db.session.delete(property)
    db.session.commit()
    flash('Property deleted successfully!', 'success')
    return redirect(url_for('user.seller_dashboard'))
```


- **Add Property Template**:

```20:320:app/templates/property/add.html
<div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label class="form-label">Property Title*</label>
                                    <input type="text" name="title" id="title" class="form-control" required>
                                    <div class="invalid-feedback" id="titleError" style="display: none;"></div>
                                </div>
                                <div class="form-group mb-3">
                                    <label class="form-label">Property Type*</label>
                                    <select name="property_type" id="propertyType" class="form-control" required>
                                        <option value="">Select Type</option>
                                        <option value="house">House</option>
                                        <option value="apartment">Apartment</option>
                                        <option value="plot">Plot</option>
                                    </select>
                                    <div class="invalid-feedback" id="propertyTypeError" style="display: none;"></div>
                                </div>
                                <div class="form-group mb-3">
                                    <label class="form-label">Price (₹)*</label>
                                    <input type="number" name="price" id="price" class="form-control" required 
                                           min="100000" step="1000">
                                    <div class="invalid-feedback" id="priceError" style="display: none;"></div>
                                    <small class="text-muted">Minimum price: ₹1,00,000</small>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label class="form-label">Description*</label>
                                    <textarea name="description" id="description" class="form-control" rows="5" required></textarea>
                                    <div class="invalid-feedback" id="descriptionError"></div>
                                </div>
                            </div>
                        </div>

                        <!-- Location Information -->
                        <div class="row mb-4">
                            <div class="col-12">
                                <h5>Location Details</h5>
                                <div class="form-group mb-3">
                                    <label class="form-label">Location*</label>
                                    <input type="text" id="locationSearch" class="form-control" 
                                           placeholder="Search for a location" required>
                                    <input type="hidden" name="location" id="location">
                                    <input type="hidden" name="latitude" id="latitude">
                                    <input type="hidden" name="longitude" id="longitude">
                                </div>
                                <div id="map" style="height: 400px; width: 100%; margin: 15px 0; border-radius: 8px; border: 1px solid #ddd;"></div>
                            </div>
                        </div>

                        <!-- Property Details -->
                        <div class="row mb-4">
                            <h5>Property Details</h5>
                            <div class="col-md-3">
                                <div class="form-group mb-3">
                                    <label class="form-label">Area (sq ft)*</label>
                                    <input type="number" name="area" id="area" class="form-control" required min="100">
                                    <div class="invalid-feedback" id="areaError" style="display: none;"></div>
                                    <small class="text-muted">Minimum area: 100 sq ft</small>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group mb-3">
                                    <label class="form-label">Bedrooms</label>
                                    <input type="number" name="bedrooms" id="bedrooms" class="form-control" min="1">
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group mb-3">
                                    <label class="form-label">Bathrooms</label>
                                    <input type="number" name="bathrooms" id="bathrooms" class="form-control" min="1">
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group mb-3">
                                    <label class="form-label">Total Floors*</label>
                                    <input type="number" name="total_floors" id="total_floors" class="form-control"  min="1">
                                    <div class="invalid-feedback" id="total_floorsError" style="display: none;"></div>
                                </div>
                            </div>
                        </div>

                        <!-- Add this inside the form, after the basic information section -->
                        <div class="form-group mb-3">
                            <label class="form-label">Property Image</label>
                            <input type="file" name="property_image" class="form-control" accept="image/*">
                            <small class="text-muted">Supported formats: PNG, JPG, JPEG, GIF</small>
                        </div>

                        <div class="text-end">
                            <a href="{{ url_for('user.seller_dashboard') }}" class="btn btn-secondary me-2">Cancel</a>
                            <button type="submit" class="btn btn-primary" id="submitBtn" disabled>Add Property</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
let map;
let marker;
let autocomplete;

function initMap() {
    const defaultLocation = { lat: 20.5937, lng: 78.9629 }; // India's center
    
    map = new google.maps.Map(document.getElementById("map"), {
        zoom: 5,
        center: defaultLocation,
        mapTypeControl: true,
        streetViewControl: true,
        fullscreenControl: true
    });

    // Initialize the autocomplete
    autocomplete = new google.maps.places.Autocomplete(
        document.getElementById("locationSearch"),
        { 
            componentRestrictions: { country: "in" },
            fields: ["formatted_address", "geometry"]
        }
    );

    // Add marker when location is selected
    autocomplete.addListener("place_changed", () => {
        const place = autocomplete.getPlace();
        if (!place.geometry) return;

        updateLocation(place.geometry.location, place.formatted_address);
        map.setCenter(place.geometry.location);
        map.setZoom(15);
    });

    // Allow clicking on map to set location
    map.addListener("click", (e) => {
        updateLocation(e.latLng);
    });
}

function updateLocation(latLng, address = null) {
    if (marker) marker.setMap(null);
    
    marker = new google.maps.Marker({
        position: latLng,
        map: map,
        draggable: true
    });

    marker.addListener('dragend', function(e) {
        updateLocation(e.latLng);
    });

    // Reverse geocode if address not provided
    if (!address) {
        const geocoder = new google.maps.Geocoder();
        geocoder.geocode({ location: latLng }, (results, status) => {
            if (status === "OK" && results[0]) {
                document.getElementById("locationSearch").value = results[0].formatted_address;
                document.getElementById("location").value = results[0].formatted_address;
            }
        });
    } else {
        document.getElementById("locationSearch").value = address;
        document.getElementById("location").value = address;
    }

    document.getElementById("latitude").value = latLng.lat();
    document.getElementById("longitude").value = latLng.lng();
}

document.addEventListener("DOMContentLoaded", initMap);

$(document).ready(function() {
    const formFields = {
        title: { touched: false },
        propertyType: { touched: false },
        price: { touched: false },
        description: { touched: false },
        location: { touched: false },
        area: { touched: false },
        total_floors: { touched: false }
    };

    function validateField(fieldId) {
        const field = $(`#${fieldId}`);
        const error = $(`#${fieldId}Error`);
        let isValid = true;

        if (!formFields[fieldId].touched) {
            return true;
        }

        switch(fieldId) {
            case 'title':
                if (!field.val().trim()) {
                    error.text('Property title is required').show();
                    field.addClass('is-invalid');
                    isValid = false;
                } else {
                    error.hide();
                    field.removeClass('is-invalid');
                }
                break;

            case 'propertyType':
                if (!field.val()) {
                    error.text('Please select a property type').show();
                    field.addClass('is-invalid');
                    isValid = false;
                } else {
                    error.hide();
                    field.removeClass('is-invalid');
                }
                break;

            case 'price':
                const price = parseFloat(field.val());
                if (!price || price < 100000) {
                    error.text('Minimum price should be ₹1,00,000').show();
                    field.addClass('is-invalid');
                    isValid = false;
                } else {
                    error.hide();
                    field.removeClass('is-invalid');
                }
                break;

            case 'description':
                if (!field.val().trim()) {
                    error.text('Property description is required').show();
                    field.addClass('is-invalid');
                    isValid = false;
                } else {
                    error.hide();
                    field.removeClass('is-invalid');
                }
                break;

            case 'area':
                const area = parseFloat(field.val());
                if (!area || area < 100) {
                    error.text('Minimum area should be 100 sq ft').show();
                    field.addClass('is-invalid');
                    isValid = false;
                } else {
                    error.hide();
                    field.removeClass('is-invalid');
                }
                break;

            case 'total_floors':
                const floors = parseInt(field.val());
                if (!floors || floors < 1) {
                    error.text('Number of floors must be at least 1').show();
                    field.addClass('is-invalid');
                    isValid = false;
                } else {
                    error.hide();
                    field.removeClass('is-invalid');
                }
                break;
        }
        return isValid;
    }

    function validateForm() {
        let isValid = true;
        Object.keys(formFields).forEach(fieldId => {
            if (!validateField(fieldId)) {
                isValid = false;
            }
        });
        $('#submitBtn').prop('disabled', !isValid);
    }

    // Mark field as touched on first interaction
    $('#propertyForm input, #propertyForm select, #propertyForm textarea').on('input change', function() {
        const fieldId = $(this).attr('id');
        if (formFields[fieldId]) {
            formFields[fieldId].touched = true;
            validateField(fieldId);
            validateForm();
        }
    });

    // Initial state - hide all errors
    Object.keys(formFields).forEach(fieldId => {
        $(`#${fieldId}Error`).hide();
    });
});
</script>
{% endblock %} 
```


- **Edit Property Template**:

```20:320:app/templates/property/edit.html
<div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label class="form-label">Property Title*</label>
                                    <input type="text" name="title" id="title" class="form-control" 
                                           value="{{ property.title }}" required>
                                    <div class="invalid-feedback" id="titleError" style="display: none;"></div>
                                </div>
                                <div class="form-group mb-3">
                                    <label class="form-label">Property Type*</label>
                                    <select name="property_type" id="propertyType" class="form-control" required>
                                        <option value="">Select Type</option>
                                        <option value="house" {% if property.property_type == 'house' %}selected{% endif %}>House</option>
                                        <option value="apartment" {% if property.property_type == 'apartment' %}selected{% endif %}>Apartment</option>
                                        <option value="plot" {% if property.property_type == 'plot' %}selected{% endif %}>Plot</option>
                                    </select>
                                    <div class="invalid-feedback" id="propertyTypeError" style="display: none;"></div>
                                </div>
                                <div class="form-group mb-3">
                                    <label class="form-label">Price (₹)*</label>
                                    <input type="number" name="price" id="price" class="form-control" 
                                           value="{{ property.price }}" required
                                           min="100000" step="1000">
                                    <div class="invalid-feedback" id="priceError" style="display: none;"></div>
                                    <small class="text-muted">Minimum price: ₹1,00,000</small>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label class="form-label">Description*</label>
                                    <textarea name="description" id="description" class="form-control" rows="5" required>{{ property.description }}</textarea>
                                    <div class="invalid-feedback" id="descriptionError" style="display: none;"></div>
                                </div>
                                <div class="form-group mb-3">
                                    <label class="form-label">Property Image</label>
                                    {% if property.image_url %}
                                        <div class="mb-2">
                                            <img src="{{ property.image_url }}" alt="{{ property.title }}" class="img-thumbnail" style="max-height: 200px;">
                                        </div>
                                    {% endif %}
                                    <input type="file" name="property_image" class="form-control" accept="image/*">
                                    <small class="text-muted">Leave empty to keep the current image</small>
                                </div>
                            </div>
                        </div>

                        <!-- Location Information -->
                        <div class="row mb-4">
                            <div class="col-12">
                                <h5>Location Details</h5>
                                <div class="form-group mb-3">
                                    <label class="form-label">Location*</label>
                                    <input type="text" id="locationSearch" class="form-control" 
                                           value="{{ property.location }}"
                                           placeholder="Search for a location" required>
                                    <input type="hidden" name="location" id="location" 
                                           value="{{ property.location }}">
                                    <input type="hidden" name="latitude" id="latitude" 
                                           value="{{ property.latitude }}">
                                    <input type="hidden" name="longitude" id="longitude" 
                                           value="{{ property.longitude }}">
                                </div>
                                <div id="map" style="height: 300px; width: 100%; margin-top: 10px; border-radius: 8px; border: 1px solid #ddd;"></div>
                            </div>
                        </div>

                        <!-- Property Details -->
                        <div class="row mb-4">
                            <h5>Property Details</h5>
                            <div class="col-md-3">
                                <div class="form-group mb-3">
                                    <label class="form-label">Area (sq ft)*</label>
                                    <input type="number" name="area" class="form-control" 
                                           value="{{ property.area }}" required>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group mb-3">
                                    <label class="form-label">Bedrooms</label>
                                    <input type="number" name="bedrooms" class="form-control" 
                                           value="{{ property.bedrooms }}">
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group mb-3">
                                    <label class="form-label">Bathrooms</label>
                                    <input type="number" name="bathrooms" class="form-control" 
                                           value="{{ property.bathrooms }}">
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group mb-3">
                                    <label class="form-label">Total Floors</label>
                                    <input type="number" name="total_floors" class="form-control" 
                                           value="{{ property.total_floors }}">
                                </div>
                            </div>
                        </div>

                        <div class="text-end">
                            <a href="{{ url_for('user.seller_dashboard') }}" class="btn btn-secondary me-2">Cancel</a>
                            <button type="submit" class="btn btn-primary" id="submitBtn" disabled>Update Property</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
let map;
let marker;
let autocomplete;

function initMap() {
    const initialLocation = {
        lat: {{ property.latitude or 20.5937 }},
        lng: {{ property.longitude or 78.9629 }}
    };
    
    map = new google.maps.Map(document.getElementById("map"), {
        zoom: {{ property.latitude and property.longitude and 15 or 5 }},
        center: initialLocation,
        mapTypeControl: true,
        streetViewControl: true,
        fullscreenControl: true
    });

    // Add initial marker if coordinates exist
    if ({{ property.latitude and property.longitude and 'true' or 'false' }}) {
        marker = new google.maps.Marker({
            position: initialLocation,
            map: map,
            draggable: true
        });

        marker.addListener('dragend', function(e) {
            updateLocation(e.latLng);
        });
    }

    // Initialize the autocomplete
    autocomplete = new google.maps.places.Autocomplete(
        document.getElementById("locationSearch"),
        { 
            componentRestrictions: { country: "in" },
            fields: ["formatted_address", "geometry"]
        }
    );

    // Add marker when location is selected
    autocomplete.addListener("place_changed", () => {
        const place = autocomplete.getPlace();
        if (!place.geometry) return;

        updateLocation(place.geometry.location, place.formatted_address);
        map.setCenter(place.geometry.location);
        map.setZoom(15);
    });

    // Allow clicking on map to set location
    map.addListener("click", (e) => {
        updateLocation(e.latLng);
    });
}

function updateLocation(latLng, address = null) {
    if (marker) marker.setMap(null);
    
    marker = new google.maps.Marker({
        position: latLng,
        map: map,
        draggable: true
    });

    marker.addListener('dragend', function(e) {
        updateLocation(e.latLng);
    });

    // Reverse geocode if address not provided
    if (!address) {
        const geocoder = new google.maps.Geocoder();
        geocoder.geocode({ location: latLng }, (results, status) => {
            if (status === "OK" && results[0]) {
                document.getElementById("locationSearch").value = results[0].formatted_address;
                document.getElementById("location").value = results[0].formatted_address;
            }
        });
    } else {
        document.getElementById("locationSearch").value = address;
        document.getElementById("location").value = address;
    }

    document.getElementById("latitude").value = latLng.lat();
    document.getElementById("longitude").value = latLng.lng();
}

document.addEventListener("DOMContentLoaded", initMap);

$(document).ready(function() {
    const formFields = {
        title: { touched: false },
        propertyType: { touched: false },
        price: { touched: false },
        description: { touched: false },
        location: { touched: false }
    };

    function validateField(fieldId) {
        const field = $(`#${fieldId}`);
        const error = $(`#${fieldId}Error`);
        let isValid = true;

        switch(fieldId) {
            case 'title':
                if (!field.val().trim()) {
                    error.text('Property title is required').show();
                    field.addClass('is-invalid');
                    isValid = false;
                } else {
                    error.hide();
                    field.removeClass('is-invalid');
                }
                break;
            case 'propertyType':
                if (!field.val()) {
                    error.text('Please select a property type').show();
                    field.addClass('is-invalid');
                    isValid = false;
                } else {
                    error.hide();
                    field.removeClass('is-invalid');
                }
                break;
            case 'price':
                const price = parseFloat(field.val());
                if (!price || price < 100000) {
                    error.text('Minimum price should be ₹1,00,000').show();
                    field.addClass('is-invalid');
                    isValid = false;
                } else {
                    error.hide();
                    field.removeClass('is-invalid');
                }
                break;
            case 'description':
                if (!field.val().trim()) {
                    error.text('Property description is required').show();
                    field.addClass('is-invalid');
                    isValid = false;
                } else {
                    error.hide();
                    field.removeClass('is-invalid');
                }
                break;
            
                if (!$('#location').val()) {
                    error.text('Please select a location').show();
                    $('#locationSearch').addClass('is-invalid');
                    isValid = false;
                } else {
                    error.hide();
                    $('#locationSearch').removeClass('is-invalid');
                }
                break;
        }
        return isValid;
    }

    function validateForm() {
        let isValid = true;
        Object.keys(formFields).forEach(fieldId => {
            if (!validateField(fieldId)) {
                isValid = false;
            }
        });
        $('#submitBtn').prop('disabled', !isValid);
    }

    // Mark field as touched on first interaction
    $('#propertyForm input, #propertyForm select, #propertyForm textarea').on('input change', function() {
        const fieldId = $(this).attr('id');
        if (formFields[fieldId]) {
            formFields[fieldId].touched = true;
            validateField(fieldId);
            validateForm();
        }
    });

    // Initial state - hide errors and validate form
    Object.keys(formFields).forEach(fieldId => {
        $(`#${fieldId}Error`).hide();
    });

    // Run initial validation since fields are pre-filled
    validateForm();
});
</script>
```


- **Property Model**:

```4:38:app/models/property.py
class Property(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    description = db.Column(db.Text)
    price = db.Column(db.Float, nullable=False)
    property_type = db.Column(db.String(50))  # 'house', 'apartment', 'plot'
    
    # Location details
    location = db.Column(db.String(100), nullable=False)
    latitude = db.Column(db.Float)
    longitude = db.Column(db.Float)
    
    # Common fields
    area = db.Column(db.Float)  # in square feet
    area_unit = db.Column(db.String(20), default='sq_ft')
    
    # Building-specific fields (for houses and apartments)
    bedrooms = db.Column(db.Integer)
    bathrooms = db.Column(db.Integer)
    floor = db.Column(db.Integer)  # for apartments
    total_floors = db.Column(db.Integer)
    
    # Plot-specific fields
    plot_dimensions = db.Column(db.String(50))  # e.g., "40x60"
    corner_plot = db.Column(db.Boolean, default=False)
    facing = db.Column(db.String(20))  # North, South, East, West
    
    # Add image fields
    image_filename = db.Column(db.String(255))
    image_url = db.Column(db.String(255))
    
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    is_available = db.Column(db.Boolean, default=True)

```


- **Contract Creation Template**:

```36:50:app/templates/contract/create.html
                <div class="mb-3">
                    <label class="form-label">Contract Terms</label>
                    <textarea name="terms" id="terms" class="form-control" rows="10" required>
1. The Seller agrees to sell and the Buyer agrees to buy the Property described above.
2. The total purchase price is {{ "{:,.2f}".format(property.price) }} INR.
3. The Buyer agrees to pay an advance payment of [Amount] INR.
4. The advance payment must be made by the specified deadline.
5. This contract is subject to both parties' acceptance.
                    </textarea>
                    <div class="invalid-feedback" id="termsError" style="display: none;"></div>
                </div>
                
                <button type="submit" class="btn btn-primary" id="submitBtn" disabled>Create Contract</button>
                <a href="{{ url_for('user.view_interests') }}" class="btn btn-secondary">Cancel</a>
            </form>
```


- **User Profile Update Route**:

```21:52:app/routes/user.py
@bp.route('/update_profile', methods=['POST'])
@login_required
def update_profile():
    phone_number = request.form.get('phone_number')
    zip_code = request.form.get('zip_code')
    
    # Validate phone number
    if phone_number and not validate_phone(phone_number):
        flash('Please enter a valid Indian phone number', 'danger')
        return redirect(url_for('user.dashboard'))
        
    # Validate PIN code
    if zip_code and not validate_pincode(zip_code):
        flash('Please enter a valid 6-digit PIN code', 'danger')
        return redirect(url_for('user.dashboard'))
    
    # Update user profile information
    current_user.phone_number = phone_number
    current_user.address = request.form.get('address')
    current_user.city = request.form.get('city')
    current_user.state = request.form.get('state')
    current_user.zip_code = zip_code
    
    # Update preferences
    current_user.preferred_property_type = request.form.get('preferred_property_type')
    current_user.preferred_location = request.form.get('preferred_location')
    current_user.preferred_latitude = float(request.form.get('latitude')) if request.form.get('latitude') else None
    current_user.preferred_longitude = float(request.form.get('longitude')) if request.form.get('longitude') else None
    
    db.session.commit()
    flash('Profile updated successfully!', 'success')
    return redirect(url_for('user.dashboard'))
```


### Next Steps

You can continue editing the project by focusing on:
- Enhancing the user interface for better user experience.
- Adding more features like property search and filtering.
- Implementing additional validations and error handling.
- Improving the contract management system.

Feel free to ask if you need further assistance or specific modifications!
